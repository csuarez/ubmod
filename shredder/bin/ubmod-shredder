#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use DBI;
use Getopt::Long;
use Pod::Usage;
use File::Spec;
use Config::Tiny;
use DateTime;
use Ubmod::Logger;
use Ubmod::Database;
use Ubmod::Shredder;
use Ubmod::Aggregator;

# Using case-sensitive options because -H and -h are distinct.
Getopt::Long::Configure('no_ignore_case');

my %options;

GetOptions(
    ''             => \$options{stdio},
    'in|i=s'       => \$options{file},
    'dir|d=s'      => \$options{dir},
    'host|H=s'     => \$options{host},
    'shred|s'      => \$options{shred},
    'format|f=s'   => \$options{format},
    'end-date|e=s' => \$options{end_date},
    'update|u'     => \$options{update},
    'verbose|v'    => \$options{verbose},
    'help|h'       => \$options{help},
) or exit 1;

main( \%options );

exit;

sub main {
    my ($options) = @_;

    if ( $options->{help} ) {
        pod2usage( -exitval => 0, -verbose => 2 );
    }

    my $logger = Ubmod::Logger->new( $options->{verbose} );

    my $dbh = Ubmod::Database->get_dbh();

    if ( $options->{shred} ) {

        if ( !$options->{format} ) {
            $logger->fatal("No input format specified.");
            exit 1;
        }
        elsif ( $options->{format} !~ /^\w+$/ ) {
            $logger->fatal("Invalid input format specified.");
            exit 1;
        }

        my $shredder = Ubmod::Shredder->factory(
            format => $options->{format},
            logger => $logger,
            dbh    => $dbh,
        );

        $shredder->set_host( $options->{host} ) if defined $options->{host};

        $logger->info("Shredding.");

        my $count;
        if ( $options->{dir} ) {
            $count = $shredder->shred_directory( $options->{dir} );
        }
        elsif ( $options->{file} ) {
            $count = $shredder->shred_file( $options->{file} );
        }
        elsif ( $options->{stdio} ) {
            $logger->info("Processing standard input.");
            $count = $shredder->shred_fh( *STDIN );
        }
        else {
            $logger->fatal("No input source specified.");
            pod2usage( -exitval => 1, -verbose => 1 );
        }

        $logger->info("Total shredded: $count");
        $logger->info("Done shredding!");

        $shredder->transform_data();
    }

    if ( $options->{update} ) {
        $logger->info("Updating aggregate tables.");

        my %agg_opts = ( logger => $logger, dbh => $dbh );

        if ( defined $options->{end_date} ) {
            if ( $options->{end_date} =~ /^(\d{4})-(\d{1,2})-(\d{1,2})$/ ) {
                my $date = eval {
                    DateTime->new( year => $1, month => $2, day => $3 );
                };
                if ( !$date ) {
                    $logger->fatal("Invalid date: '$options->{end_date}'");
                    exit 1;
                }
                $agg_opts{end_date} = $date;
            }
            else {
                $logger->fatal("Invalid date format: '$options->{end_date}'");
                exit 1;
            }
        }

        my $aggregator = Ubmod::Aggregator->new(%agg_opts);

        eval { $aggregator->aggregate(); };
        if ($@) {
            $logger->fatal("Failed to update aggregate tables: $@");
            exit 1;
        }

        $logger->info("Done updating aggregate tables!");
    }

    if ( !$options->{update} && !$options->{shred} ) {
        $logger->fatal('No shredding or updating option was specified');
        pod2usage( -exitval => 1, -verbose => 1 );
    }
}

__END__

=head1 NAME

ubmod-shredder - UBMoD shredder script

=head1 VERSION

Version: $Id$

=head1 SYNOPSIS

B<ubmod-shredder> [B<-v>] [B<-u>] [B<-s>] [B<-H> I<host>] [B<-f> I<format>] [B<-i> I<file>|B<-d> I<dir>]

=head1 OPTIONS

=head2 GENERAL OPTIONS

=over 8

=item B<-s>, B<--shred>

Shred accounting file(s).

=item B<-u>, B<--update>

Update aggregate tables.

=item B<-v>, B<--verbose>

Increase verbosity.

=item B<-h>, B<--help>

Display this text and exit.

=back

=head2 SHREDDING OPTIONS

These options may be used with the C<-s> or C<--shred> option.

=over 8

=item B<-f>, B<--format> I<format>

Specify accounting file format (pbs or sge).

=item B<-H>, B<--host> I<hostname>

Explicitly set host from which the log file(s) originated.

=item B<-i>, B<--in> I<file>

Specify input file.

=item B<-d>, B<--dir> I<directory>

Specify accounting log directory. This option assumes that file names in
the directory are formatted as YYYYMMDD. The file for the current day
will be ignored.

=item B<->

A lone dash C<-> indicates standard input should be used.

=back

=head2 AGGREGATION OPTIONS

These options may be used with the C<-u> or C<--update> option.

=over 8

=item B<-e>, B<--end-date> I<date>

Explicitly set the end date used for aggregation time intervals. The
date must be in YYYY-MM-DD format. Defaults to yesterday.

=back

=head1 DESCRIPTION

This script can be used to parse and aggregate accounting data for use
with the UBMoD portal.

=head1 EXAMPLES

  ubmod-shredder -s -f pbs -d /var/spool/pbs/server_priv/accounting

  ubmod-shredder -s -f sge -i /var/lib/gridengine/default/common/accounting

  ubmod-shredder -u

  ubmod-shredder -h

=head1 AUTHOR

Jeffrey T. Palmer <jtpalmer@ccr.buffalo.edu>

=head1 COPYRIGHT AND LICENSE

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

The Original Code is UBMoD.

The Initial Developer of the Original Code is Research Foundation of State
University of New York, on behalf of University at Buffalo.

Portions created by the Initial Developer are Copyright (C) 2007 Research
Foundation of State University of New York, on behalf of University at
Buffalo.  All Rights Reserved.

=cut
