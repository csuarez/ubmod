<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="activity">
<!--
/*
 * The contents of this file are subject to the University at Buffalo Public
 * License Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.ccr.buffalo.edu/licenses/ubpl.txt
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 *
 * The Original Code is UBMoD.
 *
 * The Initial Developer of the Original Code is Research Foundation of State
 * University of New York, on behalf of University at Buffalo.
 *
 * Portions created by the Initial Developer are Copyright (C) 2007 Research
 * Foundation of State University of New York, on behalf of University at
 * Buffalo.  All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 (the "GPL"), or the GNU
 * Lesser General Public License Version 2.1 (the "LGPL"), in which case the
 * provisions of the GPL or the LGPL are applicable instead of those above. If
 * you wish to allow use of your version of this file only under the terms of
 * either the GPL or the LGPL, and not to allow others to use your version of
 * this file under the terms of the UBPL, indicate your decision by deleting
 * the provisions above and replace them with the notice and other provisions
 * required by the GPL or the LGPL. If you do not delete the provisions above,
 * a recipient may use your version of this file under the terms of any one of
 * the UBPL, the GPL or the LGPL.
 *
 * ====================================
 * activity.xml
 * ====================================
 * Original Author: Andrew E. Bruno (CCR);
 * Contributor(s): -;
 *
 */
-->
  <resultMap id="ActivityResult" class="edu.buffalo.ccr.ubmod.tools.ActivityRecord">
    <result column="host" property="host"/>
    <result column="ugroup" property="group"/>
    <result column="user" property="user"/>
    <result column="queue" property="queue"/>
    <result column="jobs" property="jobs"/>
    <result column="wallt" property="wallt"/>
    <result column="avg_wallt" property="avgWallt"/>
    <result column="max_wallt" property="maxWallt"/>
    <result column="cput" property="cput"/>
    <result column="avg_cput" property="avgCput"/>
    <result column="max_cput" property="maxCput"/>
    <result column="avg_mem" property="avgMem"/>
    <result column="max_mem" property="maxMem"/>
    <result column="avg_vmem" property="avgVmem"/>
    <result column="max_vmem" property="maxVmem"/>
    <result column="avg_wait" property="avgWait"/>
    <result column="avg_exect" property="avgExect"/>
    <result column="avg_nodes" property="avgNodes"/>
    <result column="max_nodes" property="maxNodes"/>
    <result column="avg_cpus" property="avgCpus"/>
    <result column="max_cpus" property="maxCpus"/>
    <result column="user_count" property="userCount"/>
    <result column="group_count" property="groupCount"/>
  </resultMap>
  
  <sql id="aggregateColumns">
        host,
        queue,
        user,
        ugroup,
        count(distinct(user)) as user_count,
        count(distinct(ugroup)) as group_count,
        count(*) as jobs,
        sum(resources_used_walltime*resources_used_cpus) as wallt, 
        round(avg(resources_used_walltime*resources_used_cpus)) as avg_wallt, 
        max(resources_used_walltime*resources_used_cpus) as max_wallt, 
        sum(resources_used_cput) as cput,
        round(avg(resources_used_cput)) as avg_cput,
        max(resources_used_cput) as max_cput,
        round(avg(resources_used_mem)) as avg_mem,
        max(resources_used_mem) as max_mem,
        round(avg(resources_used_vmem)) as avg_vmem,
        max(resources_used_vmem) as max_vmem,
        round(avg(case when unix_timestamp(start) - unix_timestamp(ctime) > 0 
                       then unix_timestamp(start) - unix_timestamp(ctime) 
                       else 0 end)) as avg_wait,
        round(avg(case when unix_timestamp(end) - unix_timestamp(start) > 0 
                       then unix_timestamp(end) - unix_timestamp(start) 
                       else 0 end)) as avg_exect,
        round(avg(resources_used_nodes)) as avg_nodes,
        max(resources_used_nodes) as max_nodes,
        round(avg(resources_used_cpus)) as avg_cpus,
        max(resources_used_cpus) as max_cpus 
  </sql>
  
    <delete id="truncateActivity">
        truncate activity
    </delete>
    
    <delete id="truncateCpuConsumption">
        truncate cpu_consumption
    </delete>
    
    <delete id="truncateActualWaitTime">
        truncate actual_wait_time
    </delete>

    <insert id="insertActivity" parameterClass="edu.buffalo.ccr.ubmod.tools.ActivityRecord">
        insert into activity set
            jobs = #jobs#,
            wallt = #wallt#,
            avg_wallt = #avgWallt#,
            max_wallt = #maxWallt#,
            cput = #cput#,
            avg_cput = #avgCput#,
            max_cput = #maxCput#,
            avg_mem = #avgMem#,
            max_mem = #maxMem#,
            avg_vmem = #avgVmem#,
            max_vmem = #maxVmem#,
            avg_wait = #avgWait#,
            avg_exect = #avgExect#,
            avg_nodes = #avgNodes#,
            max_nodes = #maxNodes#,
            avg_cpus = #avgCpus#,
            max_cpus = #maxCpus#
        <selectKey resultClass="java.lang.Long">
            select last_insert_id() as id
        </selectKey>
    </insert>
    
  <select id="cpuConsumption" resultClass="java.util.HashMap" parameterClass="java.util.Map">
    select
       sum(resources_used_cput) as cput
    from
        event
    where
        type = 'E'
    <isNotEmpty property="host"> 
        and host = #host#
    </isNotEmpty>
    <isNotNull property="min">
        and resources_used_cpus &gt;= #min#
    </isNotNull>
    <isNotNull property="max">
        and resources_used_cpus &lt;= #max#
    </isNotNull>
    <isNotNull property="limit">
        and resources_used_cpus &gt; #limit#
    </isNotNull>
        and date_key between #start:DATE# and #end:DATE#
  </select>
  
    <insert id="insertCpuConsumption" parameterClass="java.util.Map">
        insert cpu_consumption set 
            interval_id=#interval_id#,
            cluster_id=#cluster_id#,
            label=#label#,
            view_order=#view_order#,
            cput=#cput#
    </insert>

  <select id="actualWaitTime" resultClass="java.util.HashMap" parameterClass="java.util.Map">
    select
       round(avg(case when unix_timestamp(start) - unix_timestamp(ctime) > 0
                      then unix_timestamp(start) - unix_timestamp(ctime)
                                             else 0 end)) as avg_wait
    from
        event
    where
        type = 'E'
    <isNotEmpty property="host"> 
        and host = #host#
    </isNotEmpty>
    <isNotNull property="min">
        and resources_used_cpus &gt;= #min#
    </isNotNull>
    <isNotNull property="max">
        and resources_used_cpus &lt;= #max#
    </isNotNull>
    <isNotNull property="limit">
        and resources_used_cpus &gt; #limit#
    </isNotNull>
        and date_key between #start:DATE# and #end:DATE#
  </select>
  
    <insert id="insertActualWaitTime" parameterClass="java.util.Map">
        insert actual_wait_time set 
            interval_id=#interval_id#,
            cluster_id=#cluster_id#,
            label=#label#,
            view_order=#view_order#,
            avg_wait=#avg_wait#
    </insert>
</sqlMap>